#include <opencv2/opencv.hpp>
#include <opencv2/imgproc.hpp>
#include <iostream>


/*

Sample program for capturing and displaying a frame, and printing the pixel
values at a given position.   
To compile, copy the following lines into a file, say "compile.bat", and
save it in the directory where this file is stored. Then, run it in a Windows terminal.

  
*/

int main() {
    cv::VideoCapture cap(0); // On my laptop "0" is the built-in camera. 
    if (!cap.isOpened()) {
        std::cerr << "Error opening the camera!" << std::endl;
        return -1;
    }

    cv::Mat frame;
    cap >> frame;
    // cv::Mat frame = imread("../DEMO_components_02.png",cv::IMREAD_COLOR);

    if (frame.empty()) {
        std::cerr << "No frame captured?" << std::endl;
        return -1;
    }
    cv::Mat gray;

    cv::Mat temp;

    cv::cvtColor(frame, gray, cv::COLOR_YUV2BGR);
    cv::cvtColor(frame, gray, cv::COLOR_BGR2GRAY);

    cv::Mat bw;

    cv::threshold(gray,bw,127,255,cv::THRESH_BINARY);

    std:: vector<std::vector<cv::Point>> contours;
    cv::findContours(bw,contours,cv::RETR_EXTERNAL,cv::CHAIN_APPROX_NONE);
    cv::drawContours(bw,contours,-1,(255,0,0));
    cv::imshow("Frame", bw);


    /*
    cv::Vec3b pixel = frame.at<cv::Vec3b>(y, x);
    std::cout << "Pixel values at (" << x << ", " << y << "): ";
    std::cout << "B: " << static_cast<int>(pixel[0]) << " ";
    std::cout << "G: " << static_cast<int>(pixel[1]) << " ";
    std::cout << "R: " << static_cast<int>(pixel[2]) << std::endl;
    */
    cv::waitKey(0);
    
    cap.release();
    cv::destroyAllWindows();
    
    return 0;
} // main()
